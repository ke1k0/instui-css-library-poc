@import "../utils/common";
@import "../utils/icons";
@import "../canvas-theme/theme";

$buttonClass: '.button';

$iconSizeSmall: 1rem;
$iconSizeMedium: 1.25rem;
$iconSizeLarge: 1.625rem;

$activeShadow: inset 0 0 0.1875rem 0.0625rem;

$enabled: '&:not(:disabled):not(.isDisabled)';

$primary: (
  "textColor": $colorTextLightest,
  "ghostTextColor": $colorTextBrand,
  "backgroundColor": $colorBackgroundBrand,
  "borderColor": $colorBorderBrand,
  "ghostBorderColor": $colorBorderBrand
);

$secondary: (
  "backgroundColor": $colorBackgroundLight,
  "borderColor": $colorBorderLight,
  "ghostBorderColor": $colorBorderDarkest,
  "textColor": $colorTextDarkest,
  "ghostTextColor": $colorTextDarkest
);

$success: (
  "backgroundColor": $colorBackgroundSuccess,
  "borderColor": $colorBorderSuccess,
  "textColor": $colorTextLightest,
  "ghostTextColor": $colorTextSuccess
);

$danger: (
  "backgroundColor": $colorBackgroundDanger,
  "borderColor": $colorBorderDanger,
  "textColor": $colorTextLightest,
  "ghostTextColor": $colorTextDanger
);

$primaryInverse: (
  "backgroundColor": $colorBackgroundLightest,
  "borderColor": $colorBorderLightest,
  "textColor": $colorTextDarkest,
  "ghostTextColor": $colorTextLightest
);

@function getColorVariant ($style, $variable) {
  $textColor: map-get($style, "textColor");
  $ghostTextColor: map-get($style, "ghostTextColor");
  $backgroundColor: map-get($style, "backgroundColor");
  $borderColor: map-get($style, "borderColor");
  $ghostBorderColor: map-get($style, "ghostBorderColor");

  @if $ghostBorderColor == null {
    $ghostBorderColor: $borderColor;
  }

  $map: (
    "Color": $textColor,
    "BorderColor": darken($borderColor, 10),
    "Background": $backgroundColor,
    "HoverBackground": darken($backgroundColor, 10),
    "ActiveBackground": darken($backgroundColor, 10),
    "ActiveBoxShadow": $activeShadow darken($borderColor, 20),

    "GhostColor": $ghostTextColor,
    "GhostBorderColor": $ghostBorderColor,
    "GhostBackground": transparent,
    "GhostHoverBackground": rgba($ghostTextColor, 0.1),
    "GhostActiveBackground": transparent,
    "GhostActiveBoxShadow": $activeShadow rgba($ghostBorderColor, 0.28)
  );

  @if $style == $primaryInverse {
    // Overrides for primary-inverse to match what was previously the `light` button variant
    @if $variable == "BorderColor" {
      @return darken($colorBorderLight, 10)
    }
    @if $variable == "HoverBackground" {
      @return darken($colorBackgroundLightest, 5)
    }
    @if $variable == "ActiveBackground" {
      @return $colorBackgroundLightest
    }
    @if $variable == "ActiveBoxShadow" {
      @return $activeShadow rgba($colorBorderLightest, 0.25)
    }
  }

  @if $style == $success {
    // Overrides for ghost hover states to ensure correct color contrast for a11y
    @if $variable == "GhostHoverBackground" {
      @return rgba($colorTextSuccess, 0.01)
    }
  }

  @return map-get($map, $variable);
};

@mixin getColors ($variant: $secondary) {
  color: getColorVariant($variant, "Color");
  background: getColorVariant($variant, "Background");
  border-color: getColorVariant($variant, "BorderColor");

  &.button--withoutBackground {
    color: getColorVariant($variant, "GhostColor");
    background: getColorVariant($variant, "GhostBackground");
    border-color: getColorVariant($variant, "GhostBorderColor");
  }

  #{$enabled} {
    &:active {
      background: getColorVariant($variant, "ActiveBackground");
      box-shadow: getColorVariant($variant, "ActiveBoxShadow");

      &.button--withoutBackground {
        background: getColorVariant($variant, "GhostActiveBackground");
        box-shadow: getColorVariant($variant, "GhostActiveBoxShadow");
      }
    }

    &:hover {
      background: getColorVariant($variant, "HoverBackground");

      &.button--withoutBackground {
        background: getColorVariant($variant, "GhostHoverBackground");
      }
    }
  }
}

@mixin colors {
  @include getColors($secondary);

  &#{$buttonClass}--primary {
    @include getColors($primary);
  }

  &#{$buttonClass}--primaryInverse {
    @include getColors($primaryInverse);
  }

  &#{$buttonClass}--success {
    @include getColors($success);
  }

  &#{$buttonClass}--danger {
    @include getColors($danger);
  }
}

@mixin sizes {
  font-size: $typographyFontSizeMedium;
  padding: 0.5625rem $spacingSmall;

  & > svg {
    font-size: $iconSizeMedium;
  }

  &#{$buttonClass}--iconOnly {
    height: $formInputHeightMedium;
    width: $formInputHeightMedium;
  }

  &#{$buttonClass}--small {
    font-size: $typographyFontSizeSmall;
    padding: 0.375rem $spacingXSmall;

    & > svg {
      font-size: $iconSizeSmall;
    }

    &#{$buttonClass}--iconOnly {
      height: $formInputHeightSmall;
      width: $formInputHeightSmall;
    }
  }

  &#{$buttonClass}--large {
    font-size: $typographyFontSizeLarge;
    padding: 0.6875rem $spacingMedium;

    & > svg {
      font-size: $iconSizeLarge;
    }

    &#{$buttonClass}--iconOnly {
      height: $formInputHeightLarge;
      width: $formInputHeightLarge;
    }
  }
}
